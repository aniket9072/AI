import java.util.*;

class a_algorithm {

  static int g = 0;

  public static void print(int puzzle[]) {
    for (int i = 0; i < 9; i++) {
      if (i % 3 == 0) {
        System.out.println();
      }
      if (puzzle[i] == -1) {
        System.out.print("_ ");
      } else {
        System.out.print(puzzle[i] + " ");
      }
    }
  }

  public static void moveLeft(int start[], int position) {
    int temp;
    temp = start[position];
    start[position] = start[position - 1];
    start[position - 1] = temp;
  }

  public static void moveRight(int start[], int position) {
    int temp;
    temp = start[position];
    start[position] = start[position + 1];
    start[position + 1] = temp;
  }

  public static void moveUp(int start[], int position) {
    int temp;
    temp = start[position];
    start[position] = start[position - 3];
    start[position - 3] = temp;
  }

  public static void moveDown(int start[], int position) {
    int temp;
    temp = start[position];
    start[position] = start[position + 3];
    start[position + 3] = temp;
  }

  public static void copy(int temp[], int real[]) {
    for (int i = 0; i < 9; i++) {
      temp[i] = real[i];
    }
  }

  public static int heuristic(int start[], int goal[]) {
    int h = 0;
    for (int i = 0; i < 9; i++) {
      for (int j = 0; j < 9; j++) {
        if (start[i] == goal[j] && start[i] != -1) {
          h += Math.abs((j - i) / 3) + Math.abs((j - i) % 3);

        }
      }

    }
    return h + g;
  }

  public static void moveTile(int start[], int goal[]) {
    int emptyAt = 0;
    for (int i = 0; i < 9; i++) {
      if (start[i] == -1) {
        emptyAt = i;
        break;
      }
    }

    int[] t1 = new int[9];
    int[] t2 = new int[9];
    int[] t3 = new int[9];
    int[] t4 = new int[9];
    int f1 = Integer.MAX_VALUE, f2 = Integer.MAX_VALUE,
        f3 = Integer.MAX_VALUE, f4 = Integer.MAX_VALUE;
    copy(t1, start);
    copy(t2, start);
    copy(t3, start);
    copy(t4, start);

    int row = emptyAt / 3;
    int col = emptyAt % 3;

    if (col - 1 >= 0) {
      moveLeft(t1, emptyAt);
      f1 = heuristic(t1, goal);
    }

    if (col + 1 < 3) {
      moveRight(t2, emptyAt);
      f2 = heuristic(t2, goal);
    }

    if (row + 1 < 3) {
      moveDown(t3, emptyAt);
      f3 = heuristic(t3, goal);
    }

    if (row - 1 >= 0) {
      moveUp(t4, emptyAt);
      f4 = heuristic(t4, goal);
    }

    // Find Least Heuristic State and Make the Move
    if (f1 <= f2 && f1 <= f3 && f1 <= f4) {
      moveLeft(start, emptyAt);
    } else if (f2 <= f1 && f2 <= f3 && f2 <= f4) {
      moveRight(start, emptyAt);
    } else if (f3 <= f1 && f3 <= f2 && f3 <= f4) {
      moveDown(start, emptyAt);
    } else {
      moveUp(start, emptyAt);
    }
  }

  public static void solveEight(int start[], int goal[]) {
    g++;
    moveTile(start, goal);
    print(start);

    int f = heuristic(start, goal);
    if (g == f) {
      System.out.print("Reached the goal state!"+f);
      return;
    }
    solveEight(start, goal);
  }

  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    int start[] = new int[9];
    int goal[] = new int[9];
    int puzzle[] = new int[9];

    System.out.println("Enter Initial Configuration: ");
    for (int i = 0; i < 9; i++) {
      start[i] = sc.nextInt();
    }

    System.out.println("Enter Final Configuration: ");
    for (int i = 0; i < 9; i++) {
      goal[i] = sc.nextInt();
    }

    // verify if possible to solve
    print(start);
    solveEight(start, goal);
  }
}
//
